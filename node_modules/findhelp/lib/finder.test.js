'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _ramda = require('ramda');

var _fixtures = require('./fixtures');

var _finder = require('./finder');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cases = [{
  argv: ['--verbose'],
  command: _fixtures.tree,
  args: [{
    verbose: true,
    help: false,
    h: false,
    v: false,
    version: false
  }]
}, {
  argv: ['list'],
  command: _fixtures.tree.list,
  args: [null, {
    a: false,
    all: false
  }]
}, {
  argv: ['list', '-a'],
  command: _fixtures.tree.list,
  args: [null, {
    a: true,
    all: false
  }]
}, {
  argv: ['workspace', 'list'],
  command: _fixtures.tree.workspace.list,
  args: [{}]
}, {
  argv: ['install', 'cool-app'],
  command: _fixtures.tree.install,
  args: ['cool-app', {}]
}, {
  argv: ['i', 'cool-app'],
  command: _fixtures.tree.install,
  args: ['cool-app', {}]
}, {
  argv: ['list', 'query'],
  command: _fixtures.tree.list,
  args: ['query', {
    a: false,
    all: false
  }]
}, {
  argv: ['login', 'bestever', 'me@there.com'],
  command: _fixtures.tree.login,
  args: ['bestever', 'me@there.com', {}]
}, {
  argv: ['login', 'bestever', 'me@there.com', 'extra'],
  command: _fixtures.tree.login,
  args: ['bestever', 'me@there.com', {}]
}, {
  argv: ['workspace', 'foo'],
  command: false,
  args: [{}]
}, {
  argv: ['workspace', 'delete', 'app', '-a', 'test'],
  command: _fixtures.tree.workspace.delete,
  args: ['app', {
    a: 'test'
  }]
}, {
  argv: ['settings', 'cool-app'],
  command: _fixtures.tree.settings,
  args: ['cool-app', null, {}]
}, {
  argv: ['settings', 'cool-app', 'someField'],
  command: _fixtures.tree.settings,
  args: ['cool-app', 'someField', {}]
}, {
  argv: ['settings', 'set', 'cool-app', 'someField', 'abc123'],
  command: _fixtures.tree.settings.set,
  args: ['cool-app', 'someField', 'abc123', {}]
}, {
  argv: ['settings', 'unset', 'cool-app', 'someField'],
  command: _fixtures.tree.settings.unset,
  args: ['cool-app', 'someField', {}]
}];

cases.forEach(function (c) {
  (0, _ava2.default)('finds ' + c.argv.join(' '), function (t) {
    if (c.command) {
      var found = (0, _finder.find)(_fixtures.tree, c.argv);
      t.is(c.command, found.command);
      t.deepEqual(c.args, (0, _ramda.init)(found.args).concat((0, _ramda.omit)('_', (0, _ramda.last)(found.args))));
    } else {
      t.throws(function () {
        return (0, _finder.find)(_fixtures.tree, c.argv);
      }, _finder.CommandNotFoundError);
    }
  });

  (0, _ava2.default)('runs ' + c.argv.join(' '), function (t) {
    var _this = {};
    var args = ['foo', 'bar', {}];
    var found = {
      command: {
        handler: function handler() {
          for (var _len = arguments.length, passed = Array(_len), _key = 0; _key < _len; _key++) {
            passed[_key] = arguments[_key];
          }

          // Passes argv as last argument
          t.deepEqual(passed, args);
          // Preserves context
          t.is(this, _this);
        }
      },
      args: args
    };
    t.plan(2);
    _finder.run.call(_this, found);
  });
});

(0, _ava2.default)('fails if not given required args', function (t) {
  t.throws(function () {
    return (0, _finder.find)(_fixtures.tree, ['workspace', 'new']);
  }, _finder.MissingRequiredArgsError);
});

(0, _ava2.default)('finds options', function (t) {
  var options = (0, _finder.findOptions)(_fixtures.tree);
  t.true(options.indexOf(_fixtures.tree.options[0]) >= 0);
  t.true(options.indexOf(_fixtures.tree.options[1]) >= 0);
  t.true(options.indexOf(_fixtures.tree.list.options[0]) === -1);
});

(0, _ava2.default)('groups options by type', function (t) {
  var options = (0, _finder.findOptions)(_fixtures.tree);
  var types = (0, _finder.optionsByType)(options);
  ['verbose', 'h', 'help'].forEach(function (o) {
    return t.true(types.boolean.indexOf(o) >= 0);
  });
});

(0, _ava2.default)('filters commands', function (t) {
  var commands = (0, _ramda.filter)(_finder.isCommand)(_fixtures.tree);
  t.true(commands.login === _fixtures.tree.login);
});

(0, _ava2.default)('filters namespaces', function (t) {
  var namespaces = (0, _ramda.filter)(_finder.isNamespace)(_fixtures.tree);
  t.true(namespaces.workspace === _fixtures.tree.workspace);
});

(0, _ava2.default)('filters options', function (t) {
  var options = (0, _ramda.filter)(_finder.isOptions)(_fixtures.tree);
  t.true(options.options === _fixtures.tree.options);
});

(0, _ava2.default)('gets args length', function (t) {
  t.is((0, _finder.getArgsNumber)(_fixtures.tree.login), 2);
  t.is((0, _finder.getArgsNumber)(_fixtures.tree.install), 1);
});