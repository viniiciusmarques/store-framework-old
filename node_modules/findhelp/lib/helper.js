'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.help = help;

var _pad = require('pad');

var _pad2 = _interopRequireDefault(_pad);

var _finder = require('./finder');

var _ramda = require('ramda');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function help(tree, pkg) {
  var _groupTree = groupTree(tree),
      rootOptions = _groupTree.rootOptions,
      root = _groupTree.root,
      ns = _groupTree.ns;

  var namespaces = _extends({ root: root }, ns);

  return '\n  Usage: ' + pkg.name + ' <command> [options]\n\n  Commands:\n\n' + (0, _ramda.values)((0, _ramda.mapObjIndexed)(formatNamespace, namespaces)).join('\n\n') + '\n\n  Options:\n\n' + (0, _ramda.map)(formatOption, rootOptions.options).join('\n') + '\n';
}

var criteria = function criteria(tree) {
  return function (key) {
    return (0, _finder.isOptions)(tree[key]) ? 'rootOptions' : (0, _finder.isCommand)(tree[key]) && !(0, _finder.isNamespace)(tree[key]) ? 'root' : (0, _finder.isNamespace)(tree[key]) ? 'ns' : '_';
  };
};

var groupTree = function groupTree(tree) {
  return (0, _ramda.compose)((0, _ramda.map)((0, _ramda.pick)(_ramda.__, tree)), (0, _ramda.groupBy)(criteria(tree)), _ramda.keys)(tree);
};

function formatCommand(padLength) {
  return function (c, k) {
    return '    ' + (0, _pad2.default)(formatCommandArgs(c, k), padLength + 2) + c.description;
  };
}

function formatRequiredArgs(c) {
  return c.requiredArgs ? '<' + (0, _finder.toArray)(c.requiredArgs).join('> <') + '> ' : '';
}

function formatOptionalArgs(c) {
  return c.optionalArgs ? '[' + (0, _finder.toArray)(c.optionalArgs).join('] [') + ']' : '';
}

function formatCommandArgs(c, k) {
  return '' + (c.__ns ? c.__ns + ' ' : '') + k + ' ' + formatRequiredArgs(c) + formatOptionalArgs(c);
}

function addNamespace(namespace) {
  return function (command) {
    command.__ns = namespace;
    return command;
  };
}

function formatNamespace(node, namespace) {
  var ns = namespace === 'root' ? undefined : namespace;
  var commands = (0, _ramda.filter)(function (n) {
    return (0, _finder.isCommand)(n);
  }, node);

  var namespaced = {};
  if ((0, _finder.isCommand)(node)) {
    namespaced[namespace] = node;
  }
  namespaced = _extends({}, namespaced, (0, _ramda.map)(addNamespace(ns), commands));

  var maxLength = Math.max.apply(Math, _toConsumableArray((0, _ramda.values)((0, _ramda.map)((0, _ramda.pipe)(formatCommandArgs, _ramda.length), namespaced))));
  return (0, _ramda.values)((0, _ramda.mapObjIndexed)(formatCommand(maxLength), namespaced)).join('\n');
}

function formatOption(o) {
  return '    ' + formatFlags(o) + ' ' + o.description;
}

function formatFlags(o) {
  var short = o.short ? '-' + o.short : null;
  var long = o.long ? '--' + o.long : null;
  return short && long ? [short, long].join(', ') + ' ' : (short || long) + ' ';
}