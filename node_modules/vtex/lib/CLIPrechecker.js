"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const semver_1 = __importDefault(require("semver"));
const pkg = __importStar(require("../package.json"));
const npmClient_js_1 = require("./clients/npmClient.js");
class CLIPrechecker {
    static ensureCompatibleNode() {
        const nodeVersion = process.version;
        if (!semver_1.default.satisfies(nodeVersion, pkg.engines.node)) {
            const minMajor = pkg.engines.node.replace('>=', '');
            const errMsg = chalk_1.default.bold(`Incompatible with node < v${minMajor}. Please upgrade node to major ${minMajor} or higher.`);
            console.error(errMsg);
            process.exit(1);
        }
    }
    static async ensureNotDeprecated() {
        const { deprecated } = await npmClient_js_1.NpmClient.getPackageMetadata(pkg.name, pkg.version);
        if (deprecated == null)
            return;
        const errMsg = chalk_1.default.bold(`This version ${pkg.version} was deprecated. Please update to the latest version: ${chalk_1.default.green('yarn global add vtex')}.`);
        console.error(errMsg);
        process.exit(1);
    }
    static async runChecks() {
        this.ensureCompatibleNode();
        await this.ensureNotDeprecated();
    }
}
exports.CLIPrechecker = CLIPrechecker;
