"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventsource_1 = __importDefault(require("eventsource"));
const ramda_1 = require("ramda");
// Colossus ping is set at 45s
const COLOSSUS_PING = 45000;
const EPSILON = 5000;
const BEFORE_NEXT_PING = COLOSSUS_PING - EPSILON;
const AFTER_NEXT_PING = COLOSSUS_PING + EPSILON;
const CONNECTION_CLOSED = 2;
const DEFAULT_RECONNECT_INTERVAL = 1000;
const MAX_RETRIES = 3;
class CustomEventSource {
    constructor(source, configuration) {
        this.source = source;
        this.configuration = configuration;
        this.events = [];
        this.eventSource = null;
        this.isClosed = false;
        this.nRetries = 0;
        this.pingStatus = {};
        this.checkPing = this.checkPing.bind(this);
        this.handleError = this.handleError.bind(this);
        this.reconnect = this.reconnect.bind(this);
        this.connectEventSource();
        this.addColossusPing();
        this.reconnectInterval = (this.eventSource && this.eventSource.reconnectInterval) || DEFAULT_RECONNECT_INTERVAL;
    }
    set onopen(newOnOpen) {
        this.esOnOpen = newOnOpen;
        this.esOnOpen = this.esOnOpen.bind(this);
        if (this.eventSource) {
            this.eventSource.onopen = this.esOnOpen;
        }
    }
    set onmessage(newOnMessage) {
        this.esOnMessage = newOnMessage;
        this.esOnMessage = this.esOnMessage.bind(this);
        if (this.eventSource) {
            this.eventSource.onmessage = this.esOnMessage;
        }
    }
    set onerror(newOnError) {
        this.esOnError = newOnError;
        this.esOnError = this.esOnError.bind(this);
        if (this.eventSource) {
            this.eventSource.onerror = this.handleError;
        }
    }
    addEventListener(event, handler) {
        this.events.push({ event, handler });
        if (this.eventSource) {
            this.eventSource.addEventListener(event, handler);
        }
    }
    close() {
        this.closeEventSource();
        this.clearTimers();
        this.isClosed = true;
    }
    handleError(err) {
        if (typeof this.esOnError === 'function') {
            this.esOnError(err);
        }
        this.nRetries += 1;
        if (this.nRetries > MAX_RETRIES) {
            this.close();
        }
        if (!this.eventSource || (this.eventSource && this.eventSource.readyState === CONNECTION_CLOSED)) {
            setTimeout(this.reconnect, this.reconnectInterval);
        }
    }
    addColossusPing() {
        if (this.eventSource) {
            this.eventSource.addEventListener('ping', this.checkPing);
        }
    }
    addMethods() {
        if (this.eventSource) {
            this.eventSource.onmessage = this.esOnMessage;
            this.eventSource.onopen = this.esOnOpen;
            this.eventSource.onerror = this.handleError;
            ramda_1.forEach(({ event, handler }) => {
                this.eventSource.addEventListener(event, handler);
            }, this.events);
        }
    }
    checkPing() {
        this.nRetries = 0;
        this.pingStatus = true;
        this.timerBeforeNextPing = setTimeout(() => {
            this.pingStatus = false;
        }, BEFORE_NEXT_PING);
        this.timerAfterNextPing = setTimeout(() => !this.pingStatus && this.reconnect(), AFTER_NEXT_PING);
    }
    clearTimers() {
        clearTimeout(this.timerBeforeNextPing);
        clearTimeout(this.timerAfterNextPing);
    }
    closeEventSource() {
        if (this.eventSource) {
            this.eventSource.close();
        }
    }
    connectEventSource() {
        this.closeEventSource();
        this.eventSource = new eventsource_1.default(this.source, this.configuration);
    }
    reconnect() {
        if (!this.isClosed) {
            this.connectEventSource();
            this.addColossusPing();
            this.addMethods();
        }
    }
}
exports.default = CustomEventSource;
