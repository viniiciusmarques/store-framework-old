"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const enquirer_1 = __importDefault(require("enquirer"));
const ramda_1 = require("ramda");
const conf_1 = require("../../conf");
const logger_1 = __importDefault(require("../../logger"));
const prompts_1 = require("../prompts");
const git = __importStar(require("./git"));
const VTEXInternalTemplates = [
    // Only show these templates for VTEX e-mail users.
    'graphql-example',
    'service-example',
    'react-guide',
    'masterdata-graphql-guide',
];
const templates = {
    'graphql-example': 'graphql-example',
    'admin-example': 'admin-example',
    'store-theme': 'store-theme',
    'delivery-theme': 'delivery-theme',
    'service-example': 'service-example',
    'render-guide': 'render-guide',
    'masterdata-graphql-guide': 'masterdata-graphql-guide',
    'support app': 'hello-support',
    'react-guide': 'react-app-template',
};
const getTemplates = () => 
// Return all templates if user's e-mail is `...@vtex...`.
// Otherwise filter the VTEX internal templates.
ramda_1.test(/@vtex\./, conf_1.getLogin()) ? ramda_1.keys(templates) : ramda_1.reject(x => VTEXInternalTemplates.indexOf(x) >= 0, ramda_1.keys(templates));
const promptTemplates = async () => {
    const cancel = 'Cancel';
    const chosen = ramda_1.prop('service', await enquirer_1.default.prompt({
        name: 'service',
        message: 'Choose where do you want to start from',
        type: 'select',
        choices: [...getTemplates(), cancel],
    }));
    if (chosen === cancel) {
        logger_1.default.info('Bye o/');
        return process.exit();
    }
    return chosen;
};
const promptContinue = async (repoName) => {
    const proceed = await prompts_1.promptConfirm(`You are about to create the new folder ${process.cwd()}/${repoName}. Do you want to continue?`);
    if (!proceed) {
        logger_1.default.info('Bye o/');
        process.exit();
    }
};
exports.default = async () => {
    logger_1.default.debug('Prompting for app info');
    logger_1.default.info('Hello! I will help you generate basic files and folders for your app.');
    try {
        const repo = templates[await promptTemplates()];
        await promptContinue(repo);
        logger_1.default.info(`Cloning https://vtex-apps/${repo}.git`);
        await git.clone(repo);
        logger_1.default.info(`Run ${chalk_1.default.bold.green(`cd ${repo}`)} and ${chalk_1.default.bold.green('vtex link')} to start developing!`);
    }
    catch (err) {
        logger_1.default.error(err.message);
        logger_1.default.debug(err);
    }
};
