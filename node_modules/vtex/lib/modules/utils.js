"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const child_process_es6_promise_1 = require("child-process-es6-promise");
const diff_1 = require("diff");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const ramda_1 = __importDefault(require("ramda"));
const dummyLogger_1 = require("../clients/dummyLogger");
const conf = __importStar(require("../conf"));
const env = __importStar(require("../env"));
const errors_1 = require("../errors");
const logger_1 = __importDefault(require("../logger"));
const manifest_1 = require("../manifest");
const sse_1 = require("../sse");
const table_1 = require("../table");
const timeout_1 = __importDefault(require("../timeout"));
const user_agent_1 = __importDefault(require("../user-agent"));
const prompts_1 = require("./prompts");
const allEvents = ['start', 'success', 'fail', 'timeout', 'logs'];
const flowEvents = ['start', 'success', 'fail'];
exports.yarnPath = `"${require.resolve('yarn/bin/yarn')}"`;
const DEFAULT_TIMEOUT = 10000;
exports.IOClientOptions = {
    timeout: (timeout_1.default || DEFAULT_TIMEOUT),
    retries: 3,
};
exports.getIOContext = () => ({
    account: conf.getAccount(),
    authToken: conf.getToken(),
    production: false,
    product: '',
    region: env.region(),
    route: {
        id: '',
        params: {},
    },
    userAgent: user_agent_1.default,
    workspace: conf.getWorkspace(),
    requestId: '',
    operationId: '',
    logger: dummyLogger_1.dummyLogger,
    platform: '',
});
const onBuildEvent = (ctx, timeout, appOrKey, callback) => {
    const [subject] = appOrKey.split('@');
    const unlistenLogs = sse_1.logAll(ctx, logger_1.default.level, subject);
    const [unlistenStart, unlistenSuccess, unlistenFail] = flowEvents.map(type => sse_1.onEvent(ctx, 'vtex.render-builder', subject, [`build.${type}`], message => callback(type, message)));
    const timer = timeout && setTimeout(() => callback('timeout'), timeout);
    const unlistenMap = {
        fail: unlistenFail,
        logs: unlistenLogs,
        start: unlistenStart,
        success: unlistenSuccess,
        timeout: () => clearTimeout(timer),
    };
    return (...types) => {
        types.forEach(type => {
            unlistenMap[type]();
        });
    };
};
exports.listenBuild = (appOrKey, triggerBuild, options = {}) => {
    return new Promise((resolve, reject) => {
        let triggerResponse;
        const { context = conf.currentContext, timeout = 5000 } = options;
        const unlisten = onBuildEvent(context, timeout, appOrKey, (eventType, message) => {
            switch (eventType) {
                case 'start':
                    unlisten('start', 'timeout');
                    break;
                case 'success':
                case 'timeout':
                    unlisten(...allEvents);
                    resolve(triggerResponse);
                    break;
                case 'fail':
                    unlisten(...allEvents);
                    reject(new errors_1.BuildFailError(message));
                    break;
            }
        });
        const unlistenBuild = response => {
            unlisten(...allEvents);
            resolve(response);
        };
        triggerBuild(unlistenBuild)
            .then(response => {
            triggerResponse = response;
        })
            .catch(e => {
            unlisten(...allEvents);
            reject(e);
        });
    });
};
exports.formatNano = (nanoseconds) => `${(nanoseconds / 1e9).toFixed(0)}s ${((nanoseconds / 1e6) % 1e3).toFixed(0)}ms`;
exports.runYarn = (relativePath, force) => {
    logger_1.default.info(`Running yarn in ${chalk_1.default.green(relativePath)}`);
    const root = manifest_1.getAppRoot();
    const command = force
        ? `${exports.yarnPath} --force --non-interactive --ignore-engines`
        : `${exports.yarnPath} --non-interactive --ignore-engines`;
    child_process_es6_promise_1.execSync(command, { stdio: 'inherit', cwd: path_1.resolve(root, relativePath) });
    logger_1.default.info('Finished running yarn');
};
exports.runYarnIfPathExists = (relativePath) => {
    const root = manifest_1.getAppRoot();
    const pathName = path_1.resolve(root, relativePath);
    if (fs_extra_1.existsSync(pathName)) {
        try {
            exports.runYarn(relativePath, false);
        }
        catch (e) {
            logger_1.default.error(`Failed to run yarn in ${chalk_1.default.green(relativePath)}`);
            throw e;
        }
    }
};
const getSwitchAccountMessage = (previousAccount, currentAccount = conf.getAccount()) => {
    return `Now you are logged in ${chalk_1.default.blue(currentAccount)}. Do you want to return to ${chalk_1.default.blue(previousAccount)} account?`;
};
exports.switchToPreviousAccount = async (previousConf) => {
    const previousAccount = previousConf.account;
    if (previousAccount !== conf.getAccount()) {
        const canSwitchToPrevious = await prompts_1.promptConfirm(getSwitchAccountMessage(previousAccount));
        if (canSwitchToPrevious) {
            conf.saveAll(previousConf);
        }
    }
};
const formatAppId = (appId) => {
    const [appVendor, appName] = ramda_1.default.split('.', appId);
    if (!appName) {
        // Then the app is an 'infra' app.
        const [infraAppVendor, infraAppName] = ramda_1.default.split(':', appId);
        if (!infraAppName) {
            return appId;
        }
        return `${chalk_1.default.blue(infraAppVendor)}:${infraAppName}`;
    }
    return `${chalk_1.default.blue(appVendor)}.${appName}`;
};
const cleanVersion = (appId) => {
    return ramda_1.default.compose((version) => {
        const [pureVersion, build] = ramda_1.default.split('+build', version);
        return build ? `${pureVersion}(linked)` : pureVersion;
    }, ramda_1.default.last, ramda_1.default.split('@'))(appId);
};
exports.matchedDepsDiffTable = (title1, title2, deps1, deps2) => {
    const depsDiff = diff_1.diffArrays(deps1, deps2);
    // Get deduplicated names (no version) of the changed deps.
    const depNames = [
        ...new Set(ramda_1.default.compose(ramda_1.default.map(k => ramda_1.default.head(ramda_1.default.split('@', k))), ramda_1.default.flatten, ramda_1.default.pluck('value'), ramda_1.default.filter((k) => !!k.removed || !!k.added))(depsDiff)),
    ].sort();
    const produceStartValues = () => ramda_1.default.map(_ => [])(depNames);
    // Each of the following objects will start as a { `depName`: [] }, ... }-like.
    const addedDeps = ramda_1.default.zipObj(depNames, produceStartValues());
    const removedDeps = ramda_1.default.zipObj(depNames, produceStartValues());
    // Custom function to set the objects values.
    const setObjectValues = (obj, formatter, filterFunction) => {
        ramda_1.default.compose(ramda_1.default.map(k => {
            const index = ramda_1.default.head(ramda_1.default.split('@', k));
            obj[index].push(formatter(k));
        }), ramda_1.default.flatten, ramda_1.default.pluck('value'), ramda_1.default.filter(filterFunction))(depsDiff);
        ramda_1.default.mapObjIndexed((_, index) => {
            obj[index] = obj[index].join(',');
        })(obj);
    };
    // Setting the objects values.
    setObjectValues(removedDeps, k => chalk_1.default.red(`${cleanVersion(k)}`), (k) => !!k.removed);
    setObjectValues(addedDeps, k => chalk_1.default.green(`${cleanVersion(k)}`), (k) => !!k.added);
    const table = table_1.createTable(); // Set table headers.
    table.push(['', chalk_1.default.bold.yellow(title1), chalk_1.default.bold.yellow(title2)]);
    const formattedDepNames = ramda_1.default.map(formatAppId, depNames);
    // Push array of changed dependencies pairs to the table.
    Array.prototype.push.apply(table, ramda_1.default.map((k) => ramda_1.default.flatten(k))(ramda_1.default.zip(
    // zipping 3 arrays.
    ramda_1.default.zip(formattedDepNames, ramda_1.default.values(removedDeps)), ramda_1.default.values(addedDeps))));
    return table;
};
