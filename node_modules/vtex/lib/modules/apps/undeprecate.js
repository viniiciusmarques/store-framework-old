"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const manifest_1 = require("../../lib/manifest");
const logger_1 = __importDefault(require("../../logger"));
const switch_1 = __importDefault(require("../auth/switch"));
const prompts_1 = require("../prompts");
const locator_1 = require("../../locator");
const utils_1 = require("./utils");
let originalAccount;
let originalWorkspace;
const switchToVendorMessage = (vendor) => {
    return `You are trying to undeprecate this app in an account that differs from the indicated vendor. Do you want to undeprecate in account ${chalk_1.default.blue(vendor)}?`;
};
const promptUndeprecate = (appsList) => prompts_1.promptConfirm(`Are you sure you want to undeprecate app` +
    (appsList.length > 1 ? 's' : '') +
    ` ${chalk_1.default.green(appsList.join(', '))}?`);
const promptUndeprecateOnVendor = (msg) => prompts_1.promptConfirm(msg);
const switchToPreviousAccount = async (previousAccount, previousWorkspace) => {
    const currentAccount = conf_1.getAccount();
    if (previousAccount !== currentAccount) {
        const canSwitchToPrevious = await promptUndeprecateOnVendor(utils_1.switchAccountMessage(previousAccount, currentAccount));
        if (canSwitchToPrevious) {
            await switch_1.default(previousAccount, { workspace: previousWorkspace });
            return;
        }
    }
    return;
};
const undeprecateApp = async (app) => {
    const { vendor, name, version } = locator_1.parseLocator(app);
    const account = conf_1.getAccount();
    if (vendor !== account) {
        const canSwitchToVendor = await promptUndeprecateOnVendor(switchToVendorMessage(vendor));
        if (!canSwitchToVendor) {
            throw new errors_1.UserCancelledError();
        }
        await switch_1.default(vendor, {});
    }
    const context = { account: vendor, workspace: 'master', authToken: conf_1.getToken() };
    const { registry } = clients_1.createClients(context);
    return await registry.undeprecateApp(`${vendor}.${name}`, version);
};
const prepareUndeprecate = async (appsList) => {
    for (const app of appsList) {
        manifest_1.ManifestValidator.validateApp(app);
        try {
            logger_1.default.debug('Starting to undeprecate app:', app);
            await undeprecateApp(app);
            logger_1.default.info('Successfully undeprecated', app);
        }
        catch (e) {
            if (e.response && e.response.status && e.response.status === 404) {
                logger_1.default.error(`Error undeprecating ${app}. App not found`);
            }
            else if (e.message && e.response.statusText) {
                logger_1.default.error(`Error undeprecating ${app}. ${e.message}. ${e.response.statusText}`);
                await switchToPreviousAccount(originalAccount, originalWorkspace);
                return;
            }
            else {
                await switchToPreviousAccount(originalAccount, originalWorkspace);
                throw e;
            }
        }
    }
};
exports.default = async (optionalApp, options) => {
    const preConfirm = options.y || options.yes;
    originalAccount = conf_1.getAccount();
    originalWorkspace = conf_1.getWorkspace();
    const appsList = [optionalApp || (await manifest_1.ManifestEditor.getManifestEditor()).appLocator, ...utils_1.parseArgs(options._)];
    if (!preConfirm && !(await promptUndeprecate(appsList))) {
        throw new errors_1.UserCancelledError();
    }
    logger_1.default.debug(`Undeprecating app ${appsList.length > 1 ? 's' : ''} : ${appsList.join(', ')}`);
    return prepareUndeprecate(appsList);
};
