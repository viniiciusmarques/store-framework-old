"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const manifest_1 = require("../../lib/manifest");
const locator_1 = require("../../locator");
const logger_1 = __importDefault(require("../../logger"));
const manifest_2 = require("../../manifest");
const switch_1 = __importDefault(require("../auth/switch"));
const prompts_1 = require("../prompts");
const utils_1 = require("./utils");
const switchToVendorMessage = (vendor) => {
    return `You are trying to deploy this app in an account that differs from the indicated vendor. Do you want to deploy in account ${chalk_1.default.blue(vendor)}?`;
};
const promptDeploy = (app) => prompts_1.promptConfirm(`Are you sure you want to deploy app ${app}`);
const switchToPreviousAccount = async (previousAccount, previousWorkspace) => {
    const currentAccount = conf_1.getAccount();
    if (previousAccount !== currentAccount) {
        const canSwitchToPrevious = await prompts_1.promptConfirm(utils_1.switchAccountMessage(previousAccount, currentAccount));
        if (canSwitchToPrevious) {
            return await switch_1.default(previousAccount, { workspace: previousWorkspace });
        }
    }
    return;
};
const deployRelease = async (app) => {
    const { vendor, name, version } = locator_1.parseLocator(app);
    const account = conf_1.getAccount();
    if (vendor !== account) {
        const canSwitchToVendor = await prompts_1.promptConfirm(switchToVendorMessage(vendor));
        if (!canSwitchToVendor) {
            throw new errors_1.UserCancelledError();
        }
        await switch_1.default(vendor, {});
    }
    const context = { account: vendor, workspace: 'master', authToken: conf_1.getToken() };
    const { registry } = clients_1.createClients(context);
    return await registry.validateApp(`${vendor}.${name}`, version);
};
const prepareDeploy = async (app, originalAccount, originalWorkspace) => {
    var _a, _b, _c;
    app = await manifest_1.ManifestValidator.validateApp(app);
    try {
        logger_1.default.debug('Starting to deploy app:', app);
        await deployRelease(app);
        logger_1.default.info('Successfully deployed', app);
    }
    catch (e) {
        const data = (_a = e.response) === null || _a === void 0 ? void 0 : _a.data;
        const code = (_b = data) === null || _b === void 0 ? void 0 : _b.code;
        if (code === 'app_is_not_rc') {
            logger_1.default.error(`App ${app} was already deployed.`);
        }
        else if ((_c = data) === null || _c === void 0 ? void 0 : _c.message) {
            logger_1.default.error(data.message);
        }
        else {
            await switchToPreviousAccount(originalAccount, originalWorkspace);
            throw e;
        }
    }
    await switchToPreviousAccount(originalAccount, originalWorkspace);
};
exports.default = async (optionalApp, options) => {
    const preConfirm = options.y || options.yes;
    const originalAccount = conf_1.getAccount();
    const originalWorkspace = conf_1.getWorkspace();
    const app = optionalApp || locator_1.toAppLocator(await manifest_2.getManifest());
    if (!preConfirm && !(await promptDeploy(app))) {
        throw new errors_1.UserCancelledError();
    }
    logger_1.default.debug(`Deploying app ${app}`);
    return prepareDeploy(app, originalAccount, originalWorkspace);
};
