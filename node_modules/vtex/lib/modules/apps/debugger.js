"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const get_stream_1 = __importDefault(require("get-stream"));
const net_1 = __importDefault(require("net"));
const ws_1 = __importDefault(require("ws"));
const conf_1 = require("../../conf");
const env_1 = require("../../env");
const locator_1 = require("../../locator");
const logger_1 = __importDefault(require("../../logger"));
const keepAliveDelayMs = 3 * 60 * 1000;
const THIRTY_SECONDS_MS = 30 * 1000;
const wsCloseCodeGoingAway = 1001;
const wsCloseCodeError = 1011;
const DEFAULT_DEBUGGER_PORT = 9229;
const MAX_RETRY_COUNT = 40;
function getErrorMessage(raw) {
    try {
        const errJson = JSON.parse(raw);
        return errJson.message || errJson.code || raw;
    }
    catch (err) {
        return raw;
    }
}
function webSocketTunnelHandler(host, path) {
    const options = {
        headers: {
            Authorization: conf_1.getToken(),
            Host: host,
            'X-Vtex-Runtime-Api': 'true',
        },
    };
    return (socket) => {
        socket.setKeepAlive(true, keepAliveDelayMs);
        const ws = new ws_1.default(`ws://${host}${path}`, options);
        const interval = setInterval(ws.ping, THIRTY_SECONDS_MS);
        const end = () => {
            clearInterval(interval);
            ws.removeAllListeners();
            socket.removeAllListeners();
            socket.destroy();
        };
        ws.on('close', end);
        ws.on('error', err => {
            end();
            logger_1.default.error(`Debugger websocket error: ${err.name}: ${err.message}`);
        });
        ws.on('unexpected-response', async (_, res) => {
            end();
            const errMsg = getErrorMessage(await get_stream_1.default(res));
            logger_1.default.warn(`Unexpected response from debugger hook (${res.statusCode}): ${errMsg}`);
        });
        ws.on('message', data => {
            try {
                socket.write(data);
            }
            catch (err) {
                end();
                ws.close(wsCloseCodeError);
            }
        });
        ws.on('open', () => {
            socket.on('data', data => {
                if (ws.readyState !== ws.OPEN) {
                    logger_1.default.debug(`Tried to write to debugger websocket but it is not opened`);
                    return;
                }
                ws.send(data, err => {
                    if (err) {
                        logger_1.default.error(`Error writing to debugger websocket: ${err.name}: ${err.message}`);
                    }
                });
            });
            socket.on('close', hadError => {
                end();
                ws.close(hadError ? wsCloseCodeError : wsCloseCodeGoingAway);
            });
        });
    };
}
function startDebuggerTunnel(manifest, port = DEFAULT_DEBUGGER_PORT) {
    const { name, vendor, version, builders } = manifest;
    const { node, 'service-js': serviceJs } = builders;
    if (!node && !serviceJs) {
        return;
    }
    const majorRange = locator_1.toMajorRange(version);
    const host = `${name}.${vendor}.${env_1.region()}.vtex.io`;
    const path = `/${conf_1.getAccount()}/${conf_1.getWorkspace()}/_debug/attach?__v=${majorRange}`;
    return new Promise((resolve, reject) => {
        const server = net_1.default.createServer();
        server.on('connection', webSocketTunnelHandler(host, path));
        server.on('error', err => {
            if (port < DEFAULT_DEBUGGER_PORT + MAX_RETRY_COUNT) {
                logger_1.default.warn(`Port ${port} in use, will try to open tunnel on port ${port + 1}`);
                resolve(startDebuggerTunnel(manifest, port + 1));
            }
            else {
                reject(err);
            }
        });
        server.listen(port, () => {
            const addr = server.address();
            resolve(addr.port);
        });
    });
}
exports.default = startDebuggerTunnel;
