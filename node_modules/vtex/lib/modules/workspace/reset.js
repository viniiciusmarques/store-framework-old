"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = __importDefault(require("../../logger"));
const prompts_1 = require("../prompts");
const promptWorkspaceReset = (name, account) => prompts_1.promptConfirm(`Are you sure you want to reset workspace ${chalk_1.default.green(name)} on account ${chalk_1.default.blue(account)}?`).then(answer => {
    if (!answer) {
        throw new errors_1.UserCancelledError();
    }
});
exports.default = async (name, options) => {
    const account = conf_1.getAccount();
    const workspace = name || conf_1.getWorkspace();
    const preConfirm = options.y || options.yes;
    const production = !!(options.p || options.production);
    logger_1.default.debug('Resetting workspace', workspace);
    if (!preConfirm) {
        await promptWorkspaceReset(workspace, account);
    }
    try {
        logger_1.default.debug('Starting to reset workspace', workspace, 'with production =', production);
        await clients_1.workspaces.reset(account, workspace, { production });
        logger_1.default.info(`Workspace ${chalk_1.default.green(workspace)} was reset ${chalk_1.default.green('successfully')} using ${chalk_1.default.green(`production=${production}`)}`);
    }
    catch (err) {
        logger_1.default.warn(`Workspace ${chalk_1.default.green(workspace)} was ${chalk_1.default.red('not')} reset`);
        if (err.response) {
            const { status, statusText, data = { message: null } } = err.response;
            const message = data.message || data;
            logger_1.default.error(`Error ${status}: ${statusText}. ${message}`);
        }
        throw err;
    }
};
