"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = __importDefault(require("../../logger"));
const VALID_WORKSPACE = /^[a-z][a-z0-9]{0,126}[a-z0-9]$/;
const warmUpRouteMap = async (workspace) => {
    try {
        const { builder } = clients_1.createClients({ workspace: workspace });
        await builder.availability('vtex.builder-hub@0.x', null);
        logger_1.default.debug('Warmed up route map');
    }
    catch (err) {
        return;
    }
};
exports.default = async (name, options) => {
    if (!VALID_WORKSPACE.test(name)) {
        throw new errors_1.CommandError("Whoops! That's not a valid workspace name. Please use only lowercase letters and numbers.");
    }
    logger_1.default.debug('Creating workspace', name);
    let production = false;
    if (options.p || options.production) {
        production = true;
    }
    try {
        await clients_1.workspaces.create(conf_1.getAccount(), name, production);
        logger_1.default.info(`Workspace ${chalk_1.default.green(name)} created ${chalk_1.default.green('successfully')} with ${chalk_1.default.green(`production=${production}`)}`);
        // First request on a brand new workspace takes very long because of route map generation, so we warm it up.
        await warmUpRouteMap(name);
    }
    catch (err) {
        if (err.response && err.response.data.code === 'WorkspaceAlreadyExists') {
            logger_1.default.error(err.response.data.message);
            return;
        }
        throw err;
    }
};
