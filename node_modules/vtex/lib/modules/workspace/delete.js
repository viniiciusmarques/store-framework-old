"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const ramda_1 = require("ramda");
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = __importDefault(require("../../logger"));
const utils_1 = require("../apps/utils");
const prompts_1 = require("../prompts");
const use_1 = __importDefault(require("./use"));
const account = conf_1.getAccount();
const workspace = conf_1.getWorkspace();
const promptWorkspaceDeletion = (names) => prompts_1.promptConfirm(`Are you sure you want to delete workspace` + (names.length > 1 ? 's' : '') + ` ${chalk_1.default.green(names.join(', '))}?`, true);
exports.deleteWorkspaces = async (names = []) => {
    const name = ramda_1.head(names);
    const decNames = ramda_1.tail(names);
    if (names.length === 0) {
        return [];
    }
    logger_1.default.debug('Starting to delete workspace', name);
    try {
        await clients_1.workspaces.delete(account, name);
        logger_1.default.info(`Workspace ${chalk_1.default.green(name)} deleted ${chalk_1.default.green('successfully')}`);
        return ramda_1.flatten([name, await exports.deleteWorkspaces(decNames)]);
    }
    catch (err) {
        logger_1.default.warn(`Workspace ${chalk_1.default.green(name)} was ${chalk_1.default.red('not')} deleted`);
        logger_1.default.error(`Error ${err.response.status}: ${err.response.statusText}. ${err.response.data.message}`);
        return exports.deleteWorkspaces(decNames);
    }
};
exports.default = async (name, options) => {
    const names = ramda_1.prepend(name, utils_1.parseArgs(options._));
    const preConfirm = options.y || options.yes;
    const force = options.f || options.force;
    logger_1.default.debug('Deleting workspace' + (names.length > 1 ? 's' : '') + ':', names.join(', '));
    if (!force && ramda_1.contains(workspace, names)) {
        return logger_1.default.error(`You are currently using the workspace ${chalk_1.default.green(workspace)}, please change your workspace before deleting`);
    }
    if (!preConfirm && !(await promptWorkspaceDeletion(names))) {
        throw new errors_1.UserCancelledError();
    }
    const deleted = await exports.deleteWorkspaces(names);
    if (ramda_1.contains(workspace, deleted)) {
        logger_1.default.warn(`The workspace you were using was deleted`);
        return await use_1.default('master');
    }
};
