"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = __importDefault(require("../../logger"));
const prompts_1 = require("../prompts");
const create_1 = __importDefault(require("./create"));
const reset_1 = __importDefault(require("./reset"));
const promptWorkspaceCreation = (name) => {
    console.log(chalk_1.default.blue('!'), `Workspace ${chalk_1.default.green(name)} doesn't exist`);
    return prompts_1.promptConfirm('Do you wish to create it?');
};
const promptWorkspaceProductionFlag = () => prompts_1.promptConfirm('Should the workspace be in production mode?', false);
const shouldPromptProduction = (production) => {
    return production === undefined || production === null;
};
exports.default = async (name, options) => {
    const reset = options ? options.r || options.reset : null;
    let production = options ? options.p || options.production : null;
    let confirm;
    const accountName = conf_1.getAccount();
    if (name === '-') {
        name = conf_1.getLastUsedWorkspace();
        if (name == null) {
            throw new errors_1.CommandError('No last used workspace was found');
        }
    }
    try {
        await clients_1.workspaces.get(accountName, name);
    }
    catch (err) {
        if (err.response && err.response.status === 404) {
            confirm = await promptWorkspaceCreation(name);
            if (!confirm) {
                throw new errors_1.UserCancelledError();
            }
            if (shouldPromptProduction(production)) {
                production = await promptWorkspaceProductionFlag();
            }
            await create_1.default(name, { production });
        }
        else {
            throw err;
        }
    }
    await conf_1.saveWorkspace(name);
    if (reset && !confirm) {
        await reset_1.default(name, { production });
    }
    logger_1.default.info(`You're now using the workspace ${chalk_1.default.green(name)} on account ${chalk_1.default.blue(accountName)}!`);
};
