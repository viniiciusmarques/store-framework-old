"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const clients_1 = require("../../clients");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = __importDefault(require("../../logger"));
const prompts_1 = require("../prompts");
const use_1 = __importDefault(require("./use"));
const { promote, get } = clients_1.workspaces;
const [account, currentWorkspace] = [conf_1.getAccount(), conf_1.getWorkspace()];
const throwIfIsMaster = (workspace) => {
    if (workspace === 'master') {
        throw new errors_1.CommandError(`It is not possible to promote workspace ${workspace} to master`);
    }
};
const isPromotable = async (workspace) => {
    throwIfIsMaster(workspace);
    const meta = await get(account, currentWorkspace);
    if (!meta.production) {
        throw new errors_1.CommandError(`Workspace ${chalk_1.default.green(currentWorkspace)} is not a ${chalk_1.default.green('production')} workspace\nOnly production workspaces may be promoted\nUse the command ${chalk_1.default.blue('vtex workspace create <workspace> --production')} to create a production workspace`);
    }
};
const promptPromoteConfirm = (workspace) => prompts_1.promptConfirm(`Are you sure you want to promote workspace ${chalk_1.default.green(workspace)} to master?`, true).then(answer => {
    if (!answer) {
        throw new errors_1.UserCancelledError();
    }
});
exports.default = async () => {
    logger_1.default.debug('Promoting workspace', currentWorkspace);
    await isPromotable(currentWorkspace);
    await promptPromoteConfirm(currentWorkspace);
    await promote(account, currentWorkspace);
    logger_1.default.info(`Workspace ${chalk_1.default.green(currentWorkspace)} promoted successfully`);
    await use_1.default('master');
};
