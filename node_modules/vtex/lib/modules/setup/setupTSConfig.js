"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = __importDefault(require("ramda"));
const clients_1 = require("../../clients");
const logger_1 = __importDefault(require("../../logger"));
const utils_1 = require("./utils");
const selectTSConfig = (tsconfigsFromBuilder, version, builder) => {
    const builderTSConfig = ramda_1.default.prop(builder, tsconfigsFromBuilder);
    if (builderTSConfig && ramda_1.default.has(version, builderTSConfig)) {
        return ramda_1.default.prop(version, builderTSConfig);
    }
    return null;
};
const getTSConfig = async () => {
    try {
        const { builder: builderClient } = clients_1.createClients({}, { retries: 2, timeout: 10000 });
        logger_1.default.info(`Fetching BuilderHub tsconfig`);
        return await builderClient.builderHubTsConfig();
    }
    catch (err) {
        logger_1.default.warn('Failed to get BuilderHub tsconfig');
        logger_1.default.debug(err);
    }
};
exports.setupTSConfig = async (manifest) => {
    const tsconfigsFromBuilder = await getTSConfig();
    if (!tsconfigsFromBuilder) {
        return;
    }
    const buildersWithBaseTSConfig = ramda_1.default.compose(ramda_1.default.reject(ramda_1.default.isNil), ramda_1.default.mapObjIndexed(ramda_1.default.curry(selectTSConfig)(tsconfigsFromBuilder)), ramda_1.default.prop('builders'))(manifest);
    return ramda_1.default.mapObjIndexed((baseTSConfig, builder) => {
        try {
            let currentTSConfig = {};
            try {
                currentTSConfig = utils_1.tsconfigEditor.read(builder);
            }
            catch (e) {
                if (e.code === 'ENOENT') {
                    logger_1.default.warn(`No tsconfig.json found in ${utils_1.tsconfigEditor.path(builder)}. Generating one...`);
                }
                else {
                    throw e;
                }
            }
            const newTSConfig = ramda_1.default.mergeDeepRight(currentTSConfig, baseTSConfig);
            logger_1.default.info(`Merging BuilderHub ${builder} tsconfig with local ${builder} tsconfig`);
            utils_1.tsconfigEditor.write(builder, newTSConfig);
        }
        catch (e) {
            logger_1.default.error(e);
        }
    })(buildersWithBaseTSConfig);
};
