"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const ramda_1 = require("ramda");
const conf_1 = require("../../conf");
const errors_1 = require("../../errors");
const logger_1 = __importDefault(require("../../logger"));
const Token_1 = require("../../Token");
const login_1 = __importStar(require("./login"));
exports.switchAccount = async (account, options, previousAccount = conf_1.getAccount()) => {
    const isValidAccount = /^\s*[\w-]+\s*$/.test(account);
    const workspace = options.w || options.workspace || 'master';
    if (!isValidAccount) {
        throw new errors_1.CommandError('Invalid account format');
    }
    else if (!previousAccount) {
        throw new errors_1.CommandError("You're not logged in right now");
    }
    else if (previousAccount === account) {
        throw new errors_1.CommandError(`You're already using the account ${chalk_1.default.blue(account)}`);
    }
    const accountToken = new Token_1.Token(conf_1.getTokens()[account]);
    if (accountToken.isValid()) {
        logger_1.default.debug(`Token stored for ${account}/${accountToken.login} is still valid`);
        login_1.saveCredentials(accountToken.login, account, accountToken.token, workspace);
        logger_1.default.info(`Logged into ${chalk_1.default.blue(conf_1.getAccount())} as ${chalk_1.default.green(conf_1.getLogin())} at workspace ${chalk_1.default.green(conf_1.getWorkspace())}`);
    }
    else {
        logger_1.default.debug(`Token for ${account} isn't stored or isn't valid`);
        return login_1.default({ account, workspace });
    }
};
const hasAccountSwitched = (account) => {
    return account === conf_1.getAccount();
};
exports.default = async (account, options) => {
    if (account === '-') {
        account = conf_1.getLastUsedAccount();
        if (account == null) {
            throw new errors_1.CommandError('No last used account was found');
        }
    }
    const previousAccount = conf_1.getAccount();
    // Enable users to type `vtex switch {account}/{workspace}` and switch
    // directly to a workspace without typing the `-w` option.
    const [parsedAccount, parsedWorkspace] = ramda_1.split('/', account);
    if (parsedWorkspace) {
        options = { ...options, w: parsedWorkspace, workspace: parsedWorkspace };
    }
    await exports.switchAccount(parsedAccount, options);
    if (hasAccountSwitched(parsedAccount)) {
        logger_1.default.info(`Switched from ${chalk_1.default.blue(previousAccount)} to ${chalk_1.default.blue(parsedAccount)}`);
    }
};
