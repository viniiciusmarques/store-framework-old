"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const update_notifier_1 = __importDefault(require("update-notifier"));
const pkg = __importStar(require("../package.json"));
function notify() {
    const notifier = update_notifier_1.default({ pkg, updateCheckInterval: 1000 * 60 * 60 * 1 });
    if (notifier.update && notifier.update.latest !== pkg.version) {
        const oldVersion = notifier.update.current;
        const latestVersion = notifier.update.latest;
        const changelog = `https://github.com/vtex/toolbelt/blob/master/CHANGELOG.md`;
        let type = notifier.update.type;
        switch (type) {
            case 'major':
                type = chalk_1.default.red(type);
                break;
            case 'minor':
                type = chalk_1.default.yellow(type);
                break;
            case 'patch':
                type = chalk_1.default.green(type);
                break;
        }
        notifier.notify({
            isGlobal: true,
            isYarnGlobal: true,
            message: [
                `New ${type} version of ${pkg.name} available! ${chalk_1.default.dim(oldVersion)} â†’ ${chalk_1.default.green(latestVersion)}`,
                `${chalk_1.default.yellow('Changelog:')} ${chalk_1.default.cyan(changelog)}`,
                `Run ${chalk_1.default.green(`yarn global add ${pkg.name}`)} to update!`,
            ].join('\n'),
        });
    }
}
exports.default = notify;
