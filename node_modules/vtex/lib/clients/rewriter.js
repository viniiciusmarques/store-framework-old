"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@vtex/api");
const ramda_1 = require("ramda");
var RedirectTypes;
(function (RedirectTypes) {
    RedirectTypes["PERMANENT"] = "PERMANENT";
    RedirectTypes["TEMPORARY"] = "TEMPORARY";
})(RedirectTypes = exports.RedirectTypes || (exports.RedirectTypes = {}));
class Rewriter extends api_1.AppGraphQLClient {
    constructor(context, options) {
        super('vtex.rewriter@1.x', context, {
            ...options,
            headers: { ...options.headers, 'cache-control': 'no-cache' },
            retries: 5,
            timeout: 10000,
        });
        this.routesIndexFiles = () => this.graphql
            .query({
            query: `
      query RoutesIndexFiles {
        redirect {
          indexFiles {
            lastChangeDate
            routeIndexFiles {
              fileName
              fileSize
            }
          }
        }
      }
      `,
            variables: {},
        }, {
            metric: 'rewriter-get-redirects-index-files',
        })
            .then(ramda_1.path(['data', 'redirect', 'indexFiles']));
        this.routesIndex = (fileName) => this.graphql
            .query({
            query: `
      query RoutesIndex($fileName: String!) {
        redirect {
          index(fileName: $fileName) {
            id
            lastChangeDate
          }
        }
      }
      `,
            variables: { fileName },
        }, {
            metric: 'rewriter-get-redirects-index',
        })
            .then(ramda_1.path(['data', 'redirect', 'index']));
        this.exportRedirects = (from, to) => this.graphql
            .query({
            query: `
      query ListRedirects($from: Int!, $to: Int!) {
        redirect {
          list(from: $from, to: $to) {
            from
            to
            type
            endDate
          }
        }
      }
      `,
            variables: { from, to },
        }, {
            metric: 'rewriter-get-redirects',
        })
            .then(ramda_1.path(['data', 'redirect', 'list']));
        this.importRedirects = (routes) => this.graphql
            .mutate({
            mutate: `
      mutation SaveMany($routes: [RedirectInput!]!) {
        redirect {
          saveMany(routes: $routes)
        }
      }
      `,
            variables: { routes },
        }, {
            metric: 'rewriter-import-redirects',
        })
            .then(ramda_1.path(['data', 'redirect', 'saveMany']));
        this.deleteRedirects = (paths) => this.graphql
            .mutate({
            mutate: `
      mutation DeleteMany($paths: [String!]!) {
        redirect {
          deleteMany(paths: $paths)
        }
      }
      `,
            variables: { paths },
        }, {
            metric: 'rewriter-delete-redirects',
        })
            .then(ramda_1.path(['data', 'redirect', 'deleteMany']));
    }
}
exports.Rewriter = Rewriter;
