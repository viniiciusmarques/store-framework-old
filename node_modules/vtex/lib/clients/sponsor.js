"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@vtex/api");
class Sponsor extends api_1.IOClient {
    constructor(context, options) {
        super(context, {
            ...options,
            authType: api_1.AuthType.bearer,
        });
        this.getSponsorAccount = async () => this.http.get(this.routes.getSponsorAccount, { metric: 'get-sponsor-account' });
        this.getEdition = async () => this.http.get(this.routes.getEdition, { metric: 'get-edition' });
        this.setEdition = async (account, editionApp) => {
            const [edition, version] = editionApp.split('@');
            const [sponsor, editionName] = edition.split('.');
            return this.http.post(this.routes.setEdition(account), { sponsor, edition: editionName, version }, { metric: 'set-edition' });
        };
        this.runHouseKeeper = async () => this.http.post(this.routes.runHouseKeeper, {}, { metric: 'run-house-keeper' });
        const { region, account, workspace } = context;
        this.region = region;
        this.account = account;
        this.workspace = workspace;
    }
    get routes() {
        return {
            getSponsorAccount: `http://kube-router.${this.region}.vtex.io/_account/${this.account}`,
            getEdition: `http://apps.${this.region}.vtex.io/${this.account}/${this.workspace}/edition`,
            setEdition: (account) => `http://tenant-provisioner.vtex.${this.region}.vtex.io/${this.account}/master/tenants/${account}/migrate`,
            runHouseKeeper: `http://housekeeper.${this.region}.vtex.io/${this.account}/master/_housekeeping/perform`,
        };
    }
}
exports.Sponsor = Sponsor;
