"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@vtex/api");
const conf_1 = require("../conf");
const env = __importStar(require("../env"));
const timeout_1 = __importDefault(require("../timeout"));
const user_agent_1 = __importDefault(require("../user-agent"));
const billingClient_1 = __importDefault(require("./billingClient"));
const Builder_1 = require("./Builder");
const dummyLogger_1 = require("./dummyLogger");
const rewriter_1 = require("./rewriter");
const DEFAULT_TIMEOUT = 15000;
const context = {
    account: conf_1.getAccount(),
    authToken: conf_1.getToken(),
    production: false,
    product: '',
    region: env.region(),
    route: {
        id: '',
        params: {},
    },
    userAgent: user_agent_1.default,
    workspace: conf_1.getWorkspace() || 'master',
    requestId: '',
    operationId: '',
    logger: dummyLogger_1.dummyLogger,
    platform: '',
};
const clusterHeader = env.cluster() ? { 'x-vtex-upstream-target': env.cluster() } : null;
const options = {
    timeout: (timeout_1.default || DEFAULT_TIMEOUT),
    headers: {
        ...clusterHeader,
    },
};
const interceptor = (client) => new Proxy({}, {
    get: (_, name) => () => {
        throw new Error(`Error trying to call ${client}.${name.toString()} before login.`);
    },
});
const createClients = (customContext = {}, customOptions = {}) => {
    const mergedContext = { ...context, ...customContext };
    const mergedOptions = { ...options, ...customOptions };
    return {
        builder: new Builder_1.Builder(mergedContext, mergedOptions),
        logger: new api_1.Logger(mergedContext, mergedOptions),
        registry: new api_1.Registry(mergedContext, mergedOptions),
        rewriter: new rewriter_1.Rewriter(mergedContext, mergedOptions),
        events: new api_1.Events(mergedContext, mergedOptions),
    };
};
exports.createClients = createClients;
const [apps, router, workspaces, logger, events, billing, rewriter] = conf_1.getToken()
    ? [
        new api_1.Apps(context, options),
        new api_1.Router(context, options),
        new api_1.Workspaces(context, options),
        new api_1.Logger(context, { headers: clusterHeader }),
        new api_1.Events(context, { headers: clusterHeader }),
        new billingClient_1.default(context, options),
        new rewriter_1.Rewriter(context, options),
    ]
    : [
        interceptor('apps'),
        interceptor('router'),
        interceptor('workspaces'),
        interceptor('logger'),
        interceptor('events'),
        interceptor('billing'),
        interceptor('rewriter'),
    ];
exports.apps = apps;
exports.router = router;
exports.workspaces = workspaces;
exports.logger = logger;
exports.events = events;
exports.billing = billing;
exports.rewriter = rewriter;
