import { AppMetaInfo } from '..';
import { InfraClient, InstanceOptions } from '../HttpClient';
import { IOContext } from '../service/typings';
export interface AssetsParams {
    files?: string[];
    pick?: string[];
}
export declare class Assets extends InfraClient {
    private route;
    constructor(context: IOContext, options?: InstanceOptions);
    getSettings(dependencies: AppMetaInfo[], appAtMajor: string, params?: AssetsParams): Promise<Record<string, any>[]>;
    getBuildJSONForApp(app: AppMetaInfo, appVendorName: string, pick?: string | string[]): Promise<Record<string, any>>;
    getSettingsFromFilesForApp(app: AppMetaInfo, files?: string | string[]): Promise<Record<string, any>>;
    getFile(appId: string, file: string, nullIfNotFound?: boolean): Promise<{}>;
    getFilteredDependencies(apps: string | string[], dependencies: AppMetaInfo[]): AppMetaInfo[];
    protected getAppFileByAccount: <T extends object | null>(app: string, path: string, nullIfNotFound?: boolean | undefined) => Promise<T>;
    protected getAppFileByVendor: <T extends object | null>(app: string, path: string, nullIfNotFound?: boolean | undefined) => Promise<T>;
    private fileRoute;
}
